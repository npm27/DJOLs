#first, convert everything to lowercase
combined$sorted_JOL_TARGET = tolower(combined$sorted_JOL_TARGET)
combined$Recall_Response = tolower(combined$Recall_Response)
##make a column denoting the percentage that strings match each other
temp = sqldf("select *,
max(100.0 * (instr(sorted_JOL_TARGET, Recall_Response) > 0) * length(sorted_JOL_TARGET) / length(Recall_Response),
100.0 * (instr(sorted_JOL_TARGET, Recall_Response) > 0) * length(Recall_Response) / length(sorted_JOL_TARGET))
percent from combined")
combined$percent_match = temp$percent
#now make a scored column
combined$scored = as.numeric(combined$percent_match >= 100 & combined$percent_match < 200)
#turn NAs from scored column to zeros
combined$scored[is.na(combined$scored)] = 0
#Write output to a .csv
#write.csv(combined, file = "auto score 11_7.csv", row.names = FALSE)
#Write output to a .csv
write.csv(combined, file = "auto score 11_7.csv", row.names = FALSE)
##set up
dat = read.csv("auto score 11_7.csv")
setwd("~/GitHub/DJOLs/1 Output/Merge files")
##set up
dat = read.csv("auto score 11_7.csv")
View(dat)
setwd("~/GitHub/DJOLs/1 Output")
##set up
dat = read.csv("auto score 11_7.csv")
####set up####
##read in data
dat1 = read.csv("processed 10_18.csv")
dat2 = read.csv("processed 10_17.csv")
dat3 = read.csv("processed 11_7.csv")
dat4 = read.csv("processed 10_8.csv")
dat = rbind(dat1, dat2, dat3, dat4)
##load libraries
library(stringr)
library(dplyr)
library(tidyr)
library(wrapr)
library(sqldf)
####Drop Unused columns####
dat = dat[c('ExperimentName', 'Subject', 'cue_target', 'Direction', 'JOL', 'JOL_RT', 'Recall_prompt', 'Response')]
colnames(dat)[7] = "cue_target.1"
colnames(dat)[8] = "Recall_Response"
#convert to strings
dat$cue_target = as.character(dat$cue_target)
dat$cue_target.1 = as.character(dat$cue_target.1)
#split cue_target into JOL cue and target
dat = dat %>% separate(cue_target,
c("jol_cue", "jol_target"))
#split cue_target.1 int0 recall cue
dat = dat %>% separate(cue_target.1,
c("recall_cue", "recall_target"))
dat = dat[ , -9]
##get rows in correct order
##first subset by EX Version
A = subset(dat,
dat$ExperimentName == "D_JOL A 2")
B = subset(dat,
dat$ExperimentName == "D_JOL B 2")
C = subset(dat,
dat$ExperimentName == "D_JOL C 2")
D = subset(dat,
dat$ExperimentName == "D_JOL D 2")
##sort on each experiment version
#sort version A
xa = match(A$recall_cue, A$jol_cue)
A[c("sorted_JOL_CUE", "sorted_JOL_TARGET")] = (A[xa, c(3:4)])
#sort version B
xb = match(B$recall_cue, B$jol_cue)
B[c("sorted_JOL_CUE", "sorted_JOL_TARGET")] = (B[xb, c(3:4)])
#sort version C
xc = match(C$recall_cue, C$jol_cue)
C[c("sorted_JOL_CUE", "sorted_JOL_TARGET")] = (C[xc, c(3:4)])
#sort version D
xd = match(D$recall_cue, D$jol_cue)
D[c("sorted_JOL_CUE", "sorted_JOL_TARGET")] = (D[xd, c(3:4)])
##put everything back together
#combined = rbind(A, B, C, D)
combined = rbind(C, D)
##drop unused columns
combined = combined[ , -c(3:4)]
####Score recall responses####
##What I want to do is check whether the contents in column 5 match the contents in column 7
#first, convert everything to lowercase
combined$sorted_JOL_TARGET = tolower(combined$sorted_JOL_TARGET)
combined$Recall_Response = tolower(combined$Recall_Response)
##make a column denoting the percentage that strings match each other
temp = sqldf("select *,
max(100.0 * (instr(sorted_JOL_TARGET, Recall_Response) > 0) * length(sorted_JOL_TARGET) / length(Recall_Response),
100.0 * (instr(sorted_JOL_TARGET, Recall_Response) > 0) * length(Recall_Response) / length(sorted_JOL_TARGET))
percent from combined")
combined$percent_match = temp$percent
#now make a scored column
combined$scored = as.numeric(combined$percent_match >= 100 & combined$percent_match < 200)
#turn NAs from scored column to zeros
combined$scored[is.na(combined$scored)] = 0
#Write output to a .csv
#write.csv(combined, file = "auto score 11_7.csv", row.names = FALSE)
setwd("~/GitHub/DJOLs/1 Output/Merge files")
####set up####
##read in data
dat1 = read.csv("processed 10_18.csv")
dat2 = read.csv("processed 10_17.csv")
dat3 = read.csv("processed 11_7.csv")
dat4 = read.csv("processed 10_8.csv")
View(dat1)
View(dat2)
View(dat3)
View(dat4)
dat = rbind(dat1, dat2, dat3, dat4)
View(dat)
library(stringr)
library(dplyr)
library(tidyr)
library(wrapr)
library(sqldf)
####Drop Unused columns####
dat = dat[c('ExperimentName', 'Subject', 'cue_target', 'Direction', 'JOL', 'JOL_RT', 'Recall_prompt', 'Response')]
colnames(dat)[7] = "cue_target.1"
colnames(dat)[8] = "Recall_Response"
#convert to strings
dat$cue_target = as.character(dat$cue_target)
dat$cue_target.1 = as.character(dat$cue_target.1)
#split cue_target into JOL cue and target
dat = dat %>% separate(cue_target,
c("jol_cue", "jol_target"))
####set up####
##read in data
dat1 = read.csv("processed 10_18.csv")
dat2 = read.csv("processed 10_17.csv")
dat3 = read.csv("processed 11_7.csv")
dat4 = read.csv("processed 10_8.csv")
dat = rbind(dat1, dat2, dat3, dat4)
##load libraries
library(stringr)
library(dplyr)
library(tidyr)
library(wrapr)
library(sqldf)
####Drop Unused columns####
dat = dat[c('ExperimentName', 'Subject', 'cue_target', 'Direction', 'JOL', 'JOL_RT', 'Recall_prompt', 'Response')]
colnames(dat)[7] = "cue_target.1"
colnames(dat)[8] = "Recall_Response"
#convert to strings
dat$cue_target = as.character(dat$cue_target)
dat$cue_target.1 = as.character(dat$cue_target.1)
#split cue_target into JOL cue and target
dat = dat %>% separate(cue_target,
c("jol_cue", "jol_target"))
#split cue_target.1 int0 recall cue
dat = dat %>% separate(cue_target.1,
c("recall_cue", "recall_target"))
dat = dat[ , -9]
##get rows in correct order
##first subset by EX Version
A = subset(dat,
dat$ExperimentName == "D_JOL A 2")
B = subset(dat,
dat$ExperimentName == "D_JOL B 2")
C = subset(dat,
dat$ExperimentName == "D_JOL C 2")
D = subset(dat,
dat$ExperimentName == "D_JOL D 2")
##sort on each experiment version
#sort version A
xa = match(A$recall_cue, A$jol_cue)
A[c("sorted_JOL_CUE", "sorted_JOL_TARGET")] = (A[xa, c(3:4)])
#sort version B
xb = match(B$recall_cue, B$jol_cue)
B[c("sorted_JOL_CUE", "sorted_JOL_TARGET")] = (B[xb, c(3:4)])
#sort version C
xc = match(C$recall_cue, C$jol_cue)
C[c("sorted_JOL_CUE", "sorted_JOL_TARGET")] = (C[xc, c(3:4)])
#sort version D
xd = match(D$recall_cue, D$jol_cue)
D[c("sorted_JOL_CUE", "sorted_JOL_TARGET")] = (D[xd, c(3:4)])
##put everything back together
#combined = rbind(A, B, C, D)
combined = rbind(C, D)
##drop unused columns
combined = combined[ , -c(3:4)]
####Score recall responses####
##What I want to do is check whether the contents in column 5 match the contents in column 7
#first, convert everything to lowercase
combined$sorted_JOL_TARGET = tolower(combined$sorted_JOL_TARGET)
combined$Recall_Response = tolower(combined$Recall_Response)
##make a column denoting the percentage that strings match each other
temp = sqldf("select *,
max(100.0 * (instr(sorted_JOL_TARGET, Recall_Response) > 0) * length(sorted_JOL_TARGET) / length(Recall_Response),
100.0 * (instr(sorted_JOL_TARGET, Recall_Response) > 0) * length(Recall_Response) / length(sorted_JOL_TARGET))
percent from combined")
combined$percent_match = temp$percent
#now make a scored column
combined$scored = as.numeric(combined$percent_match >= 100 & combined$percent_match < 200)
#turn NAs from scored column to zeros
combined$scored[is.na(combined$scored)] = 0
#Write output to a .csv
#write.csv(combined, file = "auto score 11_7.csv", row.names = FALSE)
####set up####
##read in data
dat1 = read.csv("processed 10_18.csv")
dat2 = read.csv("processed 10_17.csv")
dat3 = read.csv("processed 11_7.csv")
dat4 = read.csv("processed 10_8.csv")
dat = rbind(dat1, dat2, dat3, dat4)
##load libraries
library(stringr)
library(dplyr)
library(tidyr)
library(wrapr)
library(sqldf)
####Drop Unused columns####
dat = dat[c('ExperimentName', 'Subject', 'cue_target', 'Direction', 'JOL', 'JOL_RT', 'Recall_prompt', 'Response')]
colnames(dat)[7] = "cue_target.1"
colnames(dat)[8] = "Recall_Response"
#convert to strings
dat$cue_target = as.character(dat$cue_target)
dat$cue_target.1 = as.character(dat$cue_target.1)
#split cue_target into JOL cue and target
dat = dat %>% separate(cue_target,
c("jol_cue", "jol_target"))
#split cue_target.1 int0 recall cue
dat = dat %>% separate(cue_target.1,
c("recall_cue", "recall_target"))
dat = dat[ , -9]
##get rows in correct order
##first subset by EX Version
A = subset(dat,
dat$ExperimentName == "D_JOL A 2")
B = subset(dat,
dat$ExperimentName == "D_JOL B 2")
C = subset(dat,
dat$ExperimentName == "D_JOL C 2")
D = subset(dat,
dat$ExperimentName == "D_JOL D 2")
##sort on each experiment version
#sort version A
xa = match(A$recall_cue, A$jol_cue)
A[c("sorted_JOL_CUE", "sorted_JOL_TARGET")] = (A[xa, c(3:4)])
#sort version B
xb = match(B$recall_cue, B$jol_cue)
B[c("sorted_JOL_CUE", "sorted_JOL_TARGET")] = (B[xb, c(3:4)])
#sort version C
xc = match(C$recall_cue, C$jol_cue)
C[c("sorted_JOL_CUE", "sorted_JOL_TARGET")] = (C[xc, c(3:4)])
#sort version D
xd = match(D$recall_cue, D$jol_cue)
D[c("sorted_JOL_CUE", "sorted_JOL_TARGET")] = (D[xd, c(3:4)])
##put everything back together
combined = rbind(A, B, C, D)
#combined = rbind(C, D)
##drop unused columns
combined = combined[ , -c(3:4)]
####Score recall responses####
##What I want to do is check whether the contents in column 5 match the contents in column 7
#first, convert everything to lowercase
combined$sorted_JOL_TARGET = tolower(combined$sorted_JOL_TARGET)
combined$Recall_Response = tolower(combined$Recall_Response)
##make a column denoting the percentage that strings match each other
temp = sqldf("select *,
max(100.0 * (instr(sorted_JOL_TARGET, Recall_Response) > 0) * length(sorted_JOL_TARGET) / length(Recall_Response),
100.0 * (instr(sorted_JOL_TARGET, Recall_Response) > 0) * length(Recall_Response) / length(sorted_JOL_TARGET))
percent from combined")
combined$percent_match = temp$percent
#now make a scored column
combined$scored = as.numeric(combined$percent_match >= 100 & combined$percent_match < 200)
#turn NAs from scored column to zeros
combined$scored[is.na(combined$scored)] = 0
#Write output to a .csv
#write.csv(combined, file = "auto score 11_7.csv", row.names = FALSE)
#Write output to a .csv
write.csv(combined, file = "auto score 11_7.csv", row.names = FALSE)
summary(dat)
table(dat$ExperimentName)
#get n
length(unique(dat$Subject))
#remove NAs
summary(dat$JOL)
#remove NAs
summary(dat)
##set up
dat = read.csv("auto score 11_7.csv")
summary(dat)
#remove NAs
nomiss = na.omit(dat)
summary(nomiss)
#remove pairs that don't match well enough
dat = subset(dat,
dat$percent_match < 250)
#remove pairs that don't match well enough
dat = subset(dat,
dat$percent_match =< 250)
#remove pairs that don't match well enough
dat = subset(dat,
dat$percent_match <= 250)
#remove NAs
nomiss = na.omit(dat)
summary(nomiss)
#basic descriptives
#jols
tapply(nomiss$JOL,
nomiss$Direction, mean)
#recall
(tapply(nomiss$scored,
nomiss$Direction, mean) * 100)
setwd("~/GitHub/Emily-Honors-Thesis/Ex 1/1 Output/2 Scored")
setwd("~/GitHub/Emily-Honors-Thesis/Ex 1/1 Output/1 Raw")
##set up
dat = read.csv("auto score 11_4.csv")
#get n
length(unique(dat$Subject))
library(reshape)
##quick data screening
summary(dat)
table(dat$Subject)
##fix out of range JOLs
dat$JOL[ dat$JOL > 100] = NA
summary(dat$JOL)
##put recall on same scale as JOLs
dat$scored = dat$scored * 100
summary(dat$scored)
##remove NAs
dat = na.omit(dat)
##check descriptives
#JOLs
tapply(dat$JOL,
list(dat$ExperimentName, dat$Direction), mean)
#Recall
tapply(dat$scored,
list(dat$ExperimentName, dat$Direction), mean)
#split by condition and add column for condition type
read = subset(dat,
dat$ExperimentName == "READ_JOL A" | dat$ExperimentName == "READ_JOL B" | dat$ExperimentName == "READ_JOL C" | dat$ExperimentName == "READ_JOL D")
read$type = rep("READ")
RL = subset(dat,
dat$ExperimentName == "RL_JOL A" | dat$ExperimentName == "RL_JOL B" | dat$ExperimentName == "RL_JOL C" | dat$ExperimentName == "RL_JOL D")
RL$type = rep("RL")
IS = subset(dat,
dat$ExperimentName == "IS_JOL A" | dat$ExperimentName == "IS_JOL B" | dat$ExperimentName == "IS_JOL C" | dat$ExperimentName == "IS_JOL D")
IS$type = rep("IS")
#put the things back together
combined = rbind(read, RL, IS)
##lets try descriptives again!
#JOLs
tapply(combined$JOL,
list(combined$type, combined$Direction), mean)
#Recall
tapply(combined$scored,
list(combined$type, combined$Direction), mean)
setwd("~/GitHub/DJOLs/1 Output/Merged")
##set up
dat = read.csv("auto score 11_7.csv")
setwd("~/GitHub/DJOLs/1 Output")
##set up
dat = read.csv("auto score 11_7.csv")
##set up
dat = read.csv("auto score 11_7.csv")
library(ez)
summary(dat)
table(dat$ExperimentName)
#get n
length(unique(dat$Subject))
#remove pairs that don't match well enough
dat = subset(dat,
dat$percent_match <= 250)
#remove NAs
nomiss = na.omit(dat)
summary(nomiss)
#basic descriptives
#jols
tapply(nomiss$JOL,
nomiss$Direction, mean)
#recall
(tapply(nomiss$scored,
nomiss$Direction, mean) * 100)
jpr = c(1,2,3,4,5)
e1 = c(1,0,3,4,8)
e2 = c(0,6,8,7,4)
dat = as.data.frame(jpr, e1, e2)
View(dat)
dat = data.frame(jpr, e1, e2)
#Load data
dat = #YOUR DATA HERE
##make your model
model = lm(jpr ~ e1 + e2,
data = dat) #put whatever variables
summary(model)
new_dat = data.frame(e1 = 75 +
e2 = 69 +
IP = 0 +
IF = 1)
new_dat = data.frame(e1 == 75 +
e2 == 69 +
IP == 0 +
IF == 1)
new_dat = data.frame(e1 == 75,
e2 == 69,
IP == 0,
IF == 1)
IP = c(0,0,0,1,1)
new_dat = data.frame(e1 = 75,
+ e2 = 69,
+ IP = 0,
+ IF = 1)
new_dat = data.frame(e1 = 75, e2 = 69, IP = 0, IF = 1)
predict(model, new_dat, interval = "confidence")
help(predict)
install.packages("ltm")
library(ltm)
setwd("~/GitHub/DJOLs/1 Output")
dat = read.csv("test.csv")
View(dat)
cronbach.alpha(dat[ , c(11,12)])
cor(dat[ , c(11,12)])
4+3+6+3+4
0+1+3+1+0
1+2+2
x = c(4,3,6,3,4,0,1,3,1,0,1,2,2,0,0)
sum(x)
sum((x - 2)^2)
sum(x - 2)^2
y = c(4,3,6,3,4)
sum((y - 4)^2)
sum(y - 4)^2
z = c(0,1,3,1,0)
sum((z - 1)^2)
y-4
46-16
16/12
15/1.33
47+57+38+45+22+31+18+32+41+52+40+43
466/12
47+57+38+45
187/4
22+31+18+32
103/4
41+52+40+43
176/4
184.75+140.75+90
1457.67-415.5
1042.17/2
415.5/9
521.09/46.17
3.95 * sqrt((46.17/12))
46.75-25.75
25.75 - 44
46.75-44
x = c(2,3,8,6,5,6)
y = c(5,9,10,13,8,9)
z = c(8,6,12,11,11,12)
sum(x)
sum(y)
sum(z)
mean(x)
mean(y)
mean(z)
30+54+60
144/18
a = c(2,5,8)
mean(a)
b = c(3,9,6)
mean(b)
C = c(8,10,12)
mean(C)
d = c(6,13,11)
mean(d)
e = c(5,8,11)
mean(e)
f = c(6,9,12)
mean(f)
q = c(x,y,z)
sum((q- 8)^2)
v = c(5,6,10,10,8,9)
3 * sum((v-8)^2)
sum((v-8)^2)
172 - 66
106/13
66/5
13.2/8.15
library(ez)
q2 = as.data.frame(q)
q2$sub = rep(1:18)
q2$cond = c(rep("1", 6), rep("2", 6), rep("3", 6))
View(q2)
View(q2)
ezANOVA(data = q2m
dv = "q",
wid = "sub",
within = "cond",
detailed = "TRUE")
ezANOVA(data = q2,
dv = "q",
wid = "sub",
within = "cond",
detailed = TRUE)
View(q2)
8*3
106/12
33/8.83
sum((x - 5)^2)
sum((y - 9)^2)
sum((z - 10)^2)
24+34+30
172 - 88
22/10
sqrt((2.20/10))
0.4690416*3
ezANOVA(data = q2,
dv = "q",
wid = "sub",
within = "cond",
detailed = TRUE)
